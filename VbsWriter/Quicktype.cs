// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("startRow")]
        public string StartRow { get; set; }

        [JsonProperty("no")]
        public string No { get; set; }

        [JsonProperty("startTime")]
        public string StartTime { get; set; }

        [JsonProperty("endTime")]
        public string EndTime { get; set; }

        [JsonProperty("totalTime")]
        public string TotalTime { get; set; }

        [JsonProperty("targetEnvironment")]
        public string TargetEnvironment { get; set; }

        [JsonProperty("targetArea")]
        public string TargetArea { get; set; }

        [JsonProperty("workTitle")]
        public string WorkTitle { get; set; }

        [JsonProperty("responsible")]
        public string Responsible { get; set; }

        [JsonProperty("workPlace")]
        public string WorkPlace { get; set; }

        [JsonProperty("procedure")]
        public string Procedure { get; set; }

        [JsonProperty("sap")]
        public string Sap { get; set; }

        [JsonProperty("eni")]
        public string Eni { get; set; }

        [JsonProperty("hako")]
        public string Hako { get; set; }

        [JsonProperty("asa")]
        public string Asa { get; set; }

        [JsonProperty("hiro")]
        public string Hiro { get; set; }

        [JsonProperty("aki")]
        public string Aki { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
